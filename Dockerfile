FROM rust:alpine AS backend_build
RUN apk add --no-cache musl-dev

WORKDIR /build

COPY Cargo.lock Cargo.toml ./
# Create a fake src folder for the build
RUN mkdir src/ && touch src/main.rs
RUN cargo build --release || echo 0

RUN rm -rf src/
COPY src/ ./src
RUN cargo build --release

FROM node:alpine AS frontend_build
RUN npm i -g pnpm

# Setup elm
RUN apk add --no-cache curl
RUN curl -L -o elm.gz https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz
RUN gunzip elm.gz
RUN chmod +x elm
RUN mv elm /usr/local/bin/

WORKDIR /build

COPY ./package.json ./pnpm-lock.yaml ./
COPY ./patches/ ./patches/
RUN pnpm install

COPY ./vite.config.js ./elm.json ./
COPY ./ui/ ./ui/
# Move production constants over
RUN rm ./ui/Const.elm && mv ./ui/Const.prod.elm ./ui/Const.elm
# NOTE: We do not regenerate bindings and hope that the developers did that whilst developing
ENV SERVER=""
RUN pnpm vite build

FROM alpine:latest
LABEL authors="trickypr"

WORKDIR /app
COPY --from=frontend_build /build/dist/ ./web/
COPY --from=backend_build /build/target/release/jukebox ./jukebox

# Autogenerated bindings will be put here
RUN mkdir ui

EXPOSE 3000
ENTRYPOINT [ "/app/jukebox" ]
